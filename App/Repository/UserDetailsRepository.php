<?php

namespace App\Repository;

use App\Entities\UserDetails;
use Bootstrap\Doctrine;

/**
 * UserDetailsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class UserDetailsRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $data
     * @return array
     */
    public static function updateUserDetails($data): array
    {
        $em = Doctrine::getEntityManager();
        $userDetailsRepository = $em->getRepository('bookingportal:UserDetails');

        $userDetails = new UserDetails();
        $userDetails->setName($data['name']);
        $userDetails->setEmail($data['email']);
        $userDetails->setPhone($data['phone']);
        $userDetails->setPassword($data['password']);
        $userDetails->setRole($data['role']);
        $userDetails->setCreatedDate($data['createdDate']);
        $userDetails->setVerified(false);
        $userDetails->setStatus(true);

        try {
            $em->persist($userDetails);
            $em->flush();

            return [
                'success' => 'true',
                'email' => $data['email']
            ];
        }
        catch (\Throwable $exception) {

            $duplicateEntry = $userDetailsRepository->findOneBy(['email' => $data['email']] );

            $message = '';
            if ($duplicateEntry)
                $message = 'Email Already Registered ';

            $duplicateEntry = $userDetailsRepository->findOneBy(['phone' => $data['phone']] );

            if ($duplicateEntry)
                $message .= 'Phone Number Already Registered';

            if(strlen($message) < 1)
                $message = 'OOPS! Something went wrong please try again later';

            return [
                'success' =>false,
                'message' => $message
            ];
        }
    }

    /**
     * @param $phone
     * @return bool
     */
    public static function updateVerified($email): bool
    {
        $em = Doctrine::getEntityManager();
        $userDetailsRepository = $em->getRepository('bookingportal:UserDetails');
        $user = $userDetailsRepository->findOneBy(['email' => $email]);

        if($user) {
            $user->setVerified(true);

            $data = [
                'email' => $user->getEmail(),
                'password' => $user->getPassword()
            ];
            UserCredentialsRepository::updateUserCredentials($data);

            try {
                $em->persist($user);
                $em->flush();
                return true;
            }
            catch (\Throwable $exception) {
                return false;
            }
        }
        return false;
    }

    /**
     * @param $email
     * @return object|object[]
     */
    public static function getUserDetails($email)
    {
        $em = Doctrine::getEntityManager();

        return $em->getRepository('bookingportal:UserDetails')->findBy(['name' => 'ASC'],['email' => $email]);
    }

    /**
     * @param $email
     * @return array
     */
    public static function getUserStatus($email)
    {
        $em = Doctrine::getEntityManager();
        $userStatus = $em->getRepository('bookingportal:UserDetails')->findOneBy(['email' => $email]);

        if(!$userStatus)
            return ['success' => false];

        return [
            'success' => true,
            'verified' => $userStatus->getVerified(),
            'status' => $userStatus->getStatus()
        ];
    }
}